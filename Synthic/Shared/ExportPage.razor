@using FFmpegBlazor
@using System.Net.Mime
@using System.Diagnostics
@using System.IO.Compression
@using System.IO.Pipelines
@using System.Text.RegularExpressions
@using System.Web
@using BlazorDownloadFile
@using Blazorise
@using MimeTypes
@using Newtonsoft.Json
@using Synthic.Extensions
@using Synthic.Helpers
@using Synthic.Services
@using YoutubeExplode.Videos
@using YoutubeExplode.Videos.Streams
@using Blazorise.Components
@using Progress = FFmpegBlazor.Progress

@{/*
  Things we need to include here:  
   - Export buffer array size
   - Export format
   - Exported ZIP file name
*/}

<div class="export-page">
    <div class="field">
        <span class="field-title">Stream Format</span>
        <div class="field-content">
            <DropdownList TItem="AudioOnlyStreamInfo" TValue="string"
                          Data="@AudioOnlyStreamInfos"
                          TextField="@((item)=>item.GetTitle())"
                          ValueField="@((item)=>item.GetTitle())"
                          @bind-SelectedValue="@SelectedStreamName"
                          Color="Color.Primary"
                          MaxMenuHeight="200px"
                          class="dropdown-list">
                @SelectedStreamName
            </DropdownList>
        </div>
    </div>
    
    <button class="w-100 btn btn-primary" @onclick="@DownloadFileAsync">Download</button>
</div>

<div class="export-modal @(CurrentlyExporting ? "" : "d-none")">
    <div class="export-modal-body">
        <div class="progress-item">
            <span>[@ExportProgress.CurrentItem / @ExportProgress.TotalItems] @ExportProgress.CurrentItemName</span>
            <Progress Value="@ExportProgress.ItemPercent" Animated Striped ShowValue></Progress>
        </div>
        
        <div class="progress-item @(ExportProgress.SubItemVisible ? "" : "visually-hidden")">
            @if (string.IsNullOrWhiteSpace(ExportProgress.CurrentSubItemName))
            {
                <span>@ExportProgress.SubItemPercent%</span>
            }
            else
            {
                <span>@ExportProgress.CurrentSubItemName (@ExportProgress.SubItemPercent%)</span>
            }
            <Progress Value="@ExportProgress.SubItemPercent" Animated Striped ShowValue></Progress>
        </div>
    </div>
</div>

@code {
    [Inject]
    private EditorInstance editor { get; set; }

    [Inject]
    private IJSRuntime Runtime { get; set; }
    
    [Inject]
    public IYouTubeDownloadApi YouTubeDownloadApi { get; set; }
    
    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    private FFMPEG ffmpeg { get; set; }
    
    private string SelectedStreamName { get; set; } = "Select Stream";

    private string YouTubeUrl => editor.VideoUrl;

    private bool ExtractOpus { get; set; }

    private Video? VideoMetaData { get; set; }

    private IEnumerable<AudioOnlyStreamInfo> AudioOnlyStreamInfos { get; set; } = Array.Empty<AudioOnlyStreamInfo>();

    private string VideoFileName { get; set; }

    private ExportProgress ExportProgress { get; set; } = new();

    private bool CurrentlyExporting { get; set; } = false;

    private Track? CurrentItem { get; set; } = null;

    private FFMPEGProgress? ffmpegProgress { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        _ = ProcessYouTubeUrlAsync();
        
        if (FFmpegFactory.Runtime != null)
        {
            FFmpegFactory.Logger += WriteLogs;
        }

        ffmpeg = Globals.ffmpeg;
    }

    /// Automatically refreshes the state after invoking an action
    private void ChangeState(Action action)
    {
        action();
        StateHasChanged();
    }
    
    async Task ProcessYouTubeUrlAsync()
    {
        VideoMetaData = null;
        AudioOnlyStreamInfos = Array.Empty<AudioOnlyStreamInfo>();
        
        try
        {
            var taskVideoMetaData = YouTubeDownloadApi.GetVideoMetaDataAsync(YouTubeUrl);
            var taskAudioOnlyStreamInfos = YouTubeDownloadApi.GetAudioOnlyStreamsAsync(YouTubeUrl);

            await Task.WhenAll(taskVideoMetaData, taskAudioOnlyStreamInfos);

            VideoMetaData = await taskVideoMetaData;
            AudioOnlyStreamInfos = await taskAudioOnlyStreamInfos;

            var highest = (AudioOnlyStreamInfo?)AudioOnlyStreamInfos.TryGetWithHighestBitrate();

            SelectedStreamName = highest?.GetTitle() ?? "Select Stream";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Write("Err: " + ex);
        }
    }
    
    async Task DownloadFileAsync()
    {
        var tracks = editor.Album.Tracks.Where(x => !x.Ignored).ToList();
        
        // Downloading the video, processing each item, zipping, download
        int totalItems = tracks.Count + 3;
        if (tracks.Count == 1)
            totalItems--; // Remove a step for zipping if there's only 1 track
        
        ChangeState(() =>
        {
            ExportProgress.Reset();
            ExportProgress.SetItem(0, totalItems, "Downloading Video...");
            ExportProgress.SetSubItem(0, 100);
            CurrentlyExporting = true;
        });

        try
        {
            var streamInfo = AudioOnlyStreamInfos.Single(x => x.GetTitle() == SelectedStreamName);

            Stream stream = await (streamInfo.IsOpus() && ExtractOpus ? YouTubeDownloadApi.GetOggOpusAudioStreamAsync(streamInfo) : YouTubeDownloadApi.GetAudioStreamAsync(streamInfo));
            ChangeState(() => ExportProgress.IncrementSubItem(10));
            string extension = "." + (streamInfo.IsOpus() && ExtractOpus ? "opus" : streamInfo.Container.Name);
            string resultExtension = ".mp3";
            VideoFileName = editor.Album.UUID + extension;

            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            ChangeState(() => ExportProgress.IncrementSubItem(13));
            Console.WriteLine($"Writing {VideoFileName}");
            ffmpeg.WriteFile(VideoFileName, memoryStream.ToArray());
            ChangeState(() =>
            {
                ExportProgress.SetSubItem(100);
                ExportProgress.CurrentItemName = "Processing Tracks...";
            });

            Dictionary<Track, string> files = new();
            foreach (var track in tracks)
                files.Add(track, await ProcessTrack(track, resultExtension));

            Console.WriteLine("Done processing all files...");

            ffmpeg.UnlinkFile(VideoFileName); // We no longer need the entire video as a whole. Free up some memory

            if (files.Count == 0)
            {
                Console.Error.WriteLineAsync("Error, no files in output buffer... Expected at least 1 file.");
                return;
            }

            if (files.Count == 1)
            {
                ChangeState(() => ExportProgress.IncrementItem(newItemName: "Downloading...", totalSubItems: 0));
                var file = files.First();
                Console.WriteLine("Done! Starting Download!");

                var buffer = await ffmpeg.ReadFile(file.Value);
                FFmpegFactory.DownloadBufferAsFile(buffer, file.Key.FileFriendlyName + resultExtension, MimeTypeMap.GetMimeType(resultExtension));
            }
            else // More than 1 song, export album as zip
            {
                ChangeState(() =>
                {
                    ExportProgress.IncrementItem(newItemName: "Creating Zip...");
                    ExportProgress.SetSubItem(0, files.Count);
                });

                Console.WriteLine("Starting creating of zip archive...");
                using MemoryStream zipMemoryStream = new();
                using (ZipArchive zipArchive = new ZipArchive(zipMemoryStream, ZipArchiveMode.Create, true))
                {
                    foreach (var file in files)
                    {
                        ChangeState(() => ExportProgress.CurrentSubItemName = $"Archiving: {file.Key.Metadata.Title}");
                        Console.WriteLine($"Archiving: {file}");
                        var buffer = await ffmpeg.ReadFile(file.Value);
                        var zipEntry = zipArchive.CreateEntry(file.Key.FileFriendlyName + resultExtension);
                        await using (Stream entryStream = zipEntry.Open())
                            await entryStream.WriteAsync(buffer, 0, buffer.Length);
                        ffmpeg.UnlinkFile(file.Value);
                        Console.WriteLine($"Done Archiving: {file}");
                        ChangeState(() => ExportProgress.IncrementSubItem());
                    }
                }

                Console.WriteLine("Done! Starting Download!");
                ChangeState(() =>
                {
                    ExportProgress.IncrementItem(newItemName: "Downloading...");
                    ExportProgress.CurrentSubItemName = "";
                });

                double sizeInMB = zipMemoryStream.Length / 1024.0d / 1024.0d;
                Console.WriteLine($"File Size: {sizeInMB}mb");
                
                byte[] zipBuffer = zipMemoryStream.ToArray();
                var zipFileName = editor.Album.FileFriendlyName + ".zip";
                
                FFmpegFactory.DownloadBufferAsFile(zipBuffer, zipFileName, MimeTypeMap.GetMimeType(".zip"));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            ChangeState(() => CurrentlyExporting = false);
        }
    }

    async Task<string> ProcessTrack(Track track, string extension)
    {
        CurrentItem = track;
        ChangeState(() =>
        {
            ExportProgress.IncrementItem();
            ExportProgress.CurrentSubItemName = $"Processing: {track.Metadata.Title}";
        });
        
        
        Console.WriteLine($"Processing track: {track.Name}");
        string fileName = track.UUID + extension;
        
        var parameters = new List<string> { "-ss", track.Start.ToString("c"), "-to", track.End.ToString("c"), "-i", VideoFileName };

        Art art = track.CoverArt ?? editor.Album.CoverArt;
        
        if (art is not null)
        {
            ffmpeg.WriteFile(art.FileName, art.Content);
            
            parameters.AddRange(new [] {"-i", art.FileName, "-map", "0:0", "-map", "1:0", "-metadata:s:v", "comment=Cover (front)", "-metadata:s:v", "title=Album cover", "-id3v2_version", "3"});
        }

        foreach (var metadata in track.BuildMetadata(editor.Album))
        {
            parameters.Add("-metadata");
            parameters.Add($"{metadata.Key.ToLower()}={metadata.Value}");
        }
        parameters.Add("-write_xing");
        parameters.Add("0");
        parameters.Add(fileName);
        //parameters.AddRange(new []{"-c", "copy", fileName}); // This method is far faster, but I cannot get metadata working with it. FFMPEG does not support OPUS metadata. Odd.
        await ffmpeg.Run(parameters.ToArray());

        if (art is not null)
            ffmpeg.UnlinkFile(art.FileName);
        
        Console.WriteLine($"Done processing track: {track.Name}");

        CurrentItem = null;
        return fileName;
    }

    void WriteLogs(Logs m)
    {
        Console.WriteLine("[" + m.Type + "] " + m.Message);
        ffmpegProgress = FFMPEGProgress.ParseFFMpegOutput(m, CurrentItem);
        ChangeState(() => ExportProgress.SetSubItem((int)ffmpegProgress.Percent));
    }
}