@using Synthic.Helpers
@typeparam PropType

<div class="metadata-input @Class" style="@Style" id="@Id">
    <div>
        <span>@Title</span>
    </div>
    <input value="@Property" placeholder="@Placeholder" @oninput="OnChange" @onblur="OnBlur"/>
    @if (Custom == true)
    {
        <button @onclick="(() => OnDelete.Invoke())">x</button>
    }
</div>

@code {
    [Parameter]
    public PropType Property { get; set; }

    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public string? Class { get; set; }
    
    [Parameter]
    public string? Id { get; set; }
    
    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public Action<PropType> Callback { get; set; }

    [Parameter]
    public Action? OnDelete { get; set; }

    [Parameter]
    public bool? Custom { get; set; } = false;

    [Parameter]
    public string? Placeholder { get; set; }

    private void OnBlur(FocusEventArgs e)
    {
        Callback.Invoke(Property);
    }
    
    private void OnChange(ChangeEventArgs changeEvent)
    {
        var _type = typeof(PropType);
        if (_type.IsGenericType && _type.GetGenericTypeDefinition() == typeof(Nullable<>))
        {
            _type = Nullable.GetUnderlyingType(_type);
        }

        Property = (PropType)Convert.ChangeType(changeEvent.Value, _type);
        StateHasChanged();
    }
}