@using Synthic.Helpers
@using Synthic.Pages

<img src="@GetImageSource()" style="max-width: 300px;cursor: pointer;" onclick="document.querySelector('.file-uploader').click()"/>
<InputFile hidden="true" class="file-uploader" OnChange="@LoadFile" />
<MetadataInput Property="Editor.Album.Metadata.Title" Title="Name" Callback="(x) => Editor.Album.Metadata.Title = x"/>
<MetadataInput Property="Editor.Album.Metadata.Artist" Title="Artist" Callback="(x) => Editor.Album.Metadata.Artist = x"/>
<MetadataInput Property="Editor.Album.Metadata.Composer" Title="Composer" Callback="(x) => Editor.Album.Metadata.Composer = x"/>
<MetadataInput Property="Editor.Album.Metadata.Year" Title="Year" Callback="(x) => Editor.Album.Metadata.Year = x"/>
<MetadataInput Property="Editor.Album.Metadata.Genre" Title="Genre" Callback="(x) => Editor.Album.Metadata.Genre = x"/>

@code {
    [Inject]
    private EditorInstance Editor { get; set; }
    
    private string GetImageSource()
    {
        Art art = Editor.Album.CoverArt;

        if (art is null)
            return "/img/pending.jpg";

        return $"data:{art.ContentType};base64,{Convert.ToBase64String(art.Content)}";
    }
    
    private void LoadFile(InputFileChangeEventArgs e)
    {
        Task.Run(async () =>
        {
            try
            {
                var artFile = Editor.Album.UUID + Path.GetExtension(e.File.Name);
                using (var artMemoryStream = new MemoryStream())
                {
                    var stream = e.File.OpenReadStream(15000000L);
                    await stream.CopyToAsync(artMemoryStream);

                    Editor.Album.CoverArt = new Art()
                    {
                        FileName = artFile,
                        ContentType = e.File.ContentType
                    };
                    Editor.Album.CoverArt.SetContentAsync(artMemoryStream);
                    
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        });
    }
}